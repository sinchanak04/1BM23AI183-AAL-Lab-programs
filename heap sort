#include <stdio.h>

// Function to heapify a subtree rooted at index i
void heapify(int arr[], int n, int i) {
    int largest = i;        // Initialize largest as root (i)
    int left = 2 * i + 1;   // Left child index
    int right = 2 * i + 2;  // Right child index

    // If left child is larger than root, update largest
    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    // If right child is larger than largest so far, update largest
    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    // If largest is not root, swap the values and recursively heapify the affected subtree
    if (largest != i) {
        // Swap the root with the largest child
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;

        // Recursively heapify the affected subtree
        heapify(arr, n, largest);
    }
}

// Main function to perform heap sort
void heapSort(int arr[], int n) {
    // Build a max heap by calling heapify on each non-leaf node starting from the last non-leaf node
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);  // Heapify the subtree rooted at index i
    }

    // Extract elements one by one from the heap
    for (int i = n - 1; i >= 1; i--) {
        // Move the root (the largest element) to the end of the array
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        // Call heapify on the reduced heap (excluding the last element that is now sorted)
        heapify(arr, i, 0);
    }
}

// Function to print the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);  // Print each element of the array
    }
    printf("\n");
}

int main() {
    // Example array to be sorted
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);  // Calculate the size of the array

    // Print the unsorted array
    printf("Unsorted array: \n");
    printArray(arr, n);

    // Perform the heap sort
    heapSort(arr, n);

    // Print the sorted array
    printf("Sorted array: \n");
    printArray(arr, n);

    return 0;  // Return 0 indicating successful completion
}
